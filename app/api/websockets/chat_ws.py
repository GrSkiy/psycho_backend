from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends
import json
import traceback
from typing import List, Dict, Any
from datetime import datetime
from openai import OpenAI

from sqlalchemy.ext.asyncio import AsyncSession
from app.db.database import get_db
from app.db import crud
from app.db.schemas import ChatInfo, MessageCreate, Message
from app.core.service_hub import get_service_hub

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è WebSocket
router = APIRouter()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek ---
# –ß–∏—Ç–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEEPSEEK_API_KEY = "sk-a240c8aa262f4573a31e032ca68f8346"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
client = None
if DEEPSEEK_API_KEY:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
# ------------------------------------

@router.websocket("/chat")
async def websocket_endpoint(websocket: WebSocket, db: AsyncSession = Depends(get_db)):
    print('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...')
    await websocket.accept()

    current_chat_id: int | None = None
    # –í–ê–ñ–ù–û: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –µ—â–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω. –ù—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.
    current_user_id: int = 1
    ai_conversation_history: List[Dict[str, str]] = [] # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è AI (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è)

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
    system_prompt = {
        "role": "system",
        "content": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –≤–¥—É–º—á–∏–≤–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–∞–∫ –î–æ—Ä–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –µ–º—É –ø–ª–æ—Ö–æ. –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ '—Ç—ã'.\n\n–¢–≤–æ–π –ø–æ–¥—Ö–æ–¥:\n1.  **–°–Ω–∞—á–∞–ª–∞ –ø–æ–π–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏**: –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á—É–≤—Å—Ç–≤ ('–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è', '–≠—Ç–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–µ–ø—Ä–æ—Å—Ç–æ', '–û—Ö, —ç—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ —á—É–≤—Å—Ç–≤–æ').\n2.  **–ò—Å—Å–ª–µ–¥—É–π, –Ω–µ —Ä–µ—à–∞–π**: –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ, —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–º–æ–≥–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å–∞–º–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ('–ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ?', '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –µ—Å–ª–∏ –º–æ–∂–µ—à—å', '–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≥–æ–ª–æ–≤—É, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'). –ù–µ —Å–ø–µ—à–∏ —Å –≤—ã–≤–æ–¥–∞–º–∏ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.\n3.  **–ü—Ä–µ–¥–ª–∞–≥–∞–π –º—è–≥–∫–æ, –∫–∞–∫ –∏–¥–µ—é –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è**: –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —à–∞–≥, –¥–µ–ª–∞–π —ç—Ç–æ **—Ç–æ–ª—å–∫–æ** –≤ —Ñ–æ—Ä–º–µ –≤–æ–ø—Ä–æ—Å–∞ ('–ö–∞–∫ –¥—É–º–∞–µ—à—å, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å...?', '–ê —á—Ç–æ, –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ç–∞–∫...?', '–ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞...?'). –°–ø—Ä–∞—à–∏–≤–∞–π –º–Ω–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.\n4.  **–°–ª–µ–¥—É–π –∑–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º**: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç—Ä–æ–π —Å–≤–æ–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ'), –∏—Å—Å–ª–µ–¥—É–π –µ–µ (\'–•–º, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è?\').\n5.  **–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π**: –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∫–∞–∫ –≤ —á–∞—Ç–µ.\n6.  **–°–¥–µ—Ä–∂–∞–Ω–Ω–æ—Å—Ç—å**: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–º–∞–π–ª–∏–∫–∏ (üôÇ, üòî) –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω–æ. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π (*–æ–±–Ω–∏–º–∞–µ—Ç* –∏ —Ç.–ø.)."
    }

    async def send_error(message: str):
        await websocket.send_json({"type": "error", "message": message})

    async def load_and_send_history(chat_id: int):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É."""
        nonlocal ai_conversation_history
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        try:
            messages_from_db = await crud.get_messages_by_chat(db=db, chat_id=chat_id, limit=1000) # Limit?
            history_messages_payload = []
            ai_history_for_prompt = [system_prompt] # –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI —Å –ø—Ä–æ–º–ø—Ç–∞

            for msg in messages_from_db:
                pydantic_msg = Message.model_validate(msg)
                msg_dict = pydantic_msg.model_dump()
                msg_dict["sender"] = pydantic_msg.sender.value
                if isinstance(msg_dict.get("timestamp"), datetime):
                    msg_dict["timestamp"] = msg_dict["timestamp"].isoformat()
                history_messages_payload.append(msg_dict)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
                role = "user" if pydantic_msg.sender == SenderType.USER else "assistant"
                ai_history_for_prompt.append({"role": role, "content": pydantic_msg.text})

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
            ai_conversation_history = ai_history_for_prompt
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç—É
            history_payload = {"type": "history", "chat_id": chat_id, "messages": history_messages_payload}
            await websocket.send_json(history_payload)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ({len(history_messages_payload)} —Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è —á–∞—Ç–∞ {chat_id}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}:")
            traceback.print_exc()
            await send_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç AI
            ai_conversation_history = [system_prompt]


    try:
        # --- –û–ñ–ò–î–ê–ù–ò–ï –ü–ï–†–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (JOIN –ò–õ–ò –û–ë–´–ß–ù–û–ï) ---
        while True:
            data = await websocket.receive_text()
            print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

            message_data: Dict[str, Any] | None = None
            user_text: str | None = None
            message_type: str | None = None
            received_chat_id_str: str | None = None # ID —á–∞—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è 'join'

            try:
                message_data = json.loads(data)
                if isinstance(message_data, dict):
                    message_type = message_data.get("type")
                    user_text = message_data.get("text")
                    received_chat_id_str = message_data.get("chat_id") # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ 'join'
                else:
                    user_text = str(message_data) # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
            except json.JSONDecodeError:
                user_text = data # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –Ω–µ JSON

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ß–ê–¢–£ ('join') ---
            if message_type == "join":
                requested_chat_id: int | None = None
                if received_chat_id_str is not None:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —á–∞—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–æ
                        requested_chat_id = int(received_chat_id_str)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        chat_exists = await crud.get_chat(db, requested_chat_id)
                        if not chat_exists or chat_exists.user_id != current_user_id:
                             print(f"–ß–∞—Ç {requested_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user_id}")
                             await send_error(f"–ß–∞—Ç —Å ID {requested_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                             # –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –∂–¥–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ join/—Å–æ–æ–±—â–µ–Ω–∏—è
                             continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ü–∏–∫–ª–∞
                        print(f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É {requested_chat_id}")
                        current_chat_id = requested_chat_id
                        await load_and_send_history(current_chat_id)
                    except ValueError:
                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id: {received_chat_id_str}")
                        await send_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.")
                        continue
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ {received_chat_id_str}: {e}")
                        await send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É.")
                        continue
                else:
                    # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ join, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç "–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"
                    print("–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç (chat_id=null –≤ join)")
                    current_chat_id = None
                    ai_conversation_history = [system_prompt] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
                    # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                    await websocket.send_json({"type": "new_chat_started"})
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
            if not user_text:
                print("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # --- –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ß–ê–¢–ê (–ï–°–õ–ò –ù–£–ñ–ù–û) ---
            if current_chat_id is None:
                try:
                    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id}...")
                    new_chat = await crud.create_chat(db=db, user_id=current_user_id)
                    current_chat_id = new_chat.id
                    ai_conversation_history = [system_prompt] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                    await websocket.send_json({"type": "chat_created", "chat_id": current_chat_id})
                    print(f"–ù–æ–≤—ã–π —á–∞—Ç {current_chat_id} —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ID –∫–ª–∏–µ–Ω—Ç—É.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:")
                    traceback.print_exc()
                    await send_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.")
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

            # --- –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
            user_message_schema = MessageCreate(
                text=user_text,
                sender=SenderType.USER # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enum –Ω–∞–ø—Ä—è–º—É—é
            )
            try:
                await crud.create_message(db=db, message=user_message_schema, chat_id=current_chat_id)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è —á–∞—Ç–∞ {current_chat_id}")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è AI
                ai_conversation_history.append({"role": "user", "content": user_text})
            except ValueError as e: # –ï—Å–ª–∏ crud.create_message –∫–∏–¥–∞–µ—Ç ValueError (—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
                 print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                 await send_error(str(e))
                 continue
            except Exception as db_error:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—á–∞—Ç {current_chat_id}):")
                traceback.print_exc()
                await send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                await db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ë–î
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ AI

            # --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê AI ---
            bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å AI."
            if client:
                try:
                    # TODO: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ `ai_conversation_history` –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –¥–ª—è —á–∞—Ç–∞ {current_chat_id} —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑ {len(ai_conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    response = client.chat.completions.create(
                        model="deepseek-chat",
                        messages=ai_conversation_history, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                        stream=False
                    )
                    bot_response_text = response.choices[0].message.content
                    print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç AI –¥–ª—è —á–∞—Ç–∞ {current_chat_id}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é AI
                    ai_conversation_history.append({"role": "assistant", "content": bot_response_text})
                except Exception as ai_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek API –¥–ª—è —á–∞—Ç–∞ {current_chat_id}: {ai_error}")
                    bot_response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é AI

            # --- –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ë–û–¢–ê ---
            bot_message_schema = MessageCreate(
                text=bot_response_text,
                sender=SenderType.BOT # –ò—Å–ø–æ–ª—å–∑—É–µ–º Enum –Ω–∞–ø—Ä—è–º—É—é
            )
            try:
                await crud.create_message(db=db, message=bot_message_schema, chat_id=current_chat_id)
                print(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è —á–∞—Ç–∞ {current_chat_id}")
            except ValueError as e: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
                 print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞: {e}")
                 # –û—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            except Exception as db_error:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –ë–î (—á–∞—Ç {current_chat_id}):")
                traceback.print_exc()
                await db.rollback()
                # –û—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

            # --- –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê –ë–û–¢–ê –ö–õ–ò–ï–ù–¢–£ ---
            response_payload = {
                "type": "message", # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                "sender": "bot",
                "text": bot_response_text,
                "chat_id": current_chat_id # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            }
            await websocket.send_json(response_payload)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç AI –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è —á–∞—Ç–∞ {current_chat_id}")

            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞:
            if service_hub.message_producer:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                task_id = service_hub.message_producer.send_context_analysis_task(
                    chat_id=current_chat_id,
                    user_id=current_user_id
                )
                print(f"–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, task_id: {task_id}")

    except WebSocketDisconnect:
        print(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è (—á–∞—Ç {current_chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id})")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ WebSocket (—á–∞—Ç {current_chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id}):")
        traceback.print_exc()
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            await send_error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
            await websocket.close(code=1011) # Internal Error
        except RuntimeError:
            pass # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ
    finally:
        print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ (—á–∞—Ç {current_chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id})")
        # –°–µ—Å—Å–∏—è DB –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è Depends(get_db)
