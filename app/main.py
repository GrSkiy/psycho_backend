from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends
import json
import os # –î–ª—è —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from openai import OpenAI # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OpenAI SDK
from sqlalchemy.ext.asyncio import AsyncSession # –ò–º–ø–æ—Ä—Ç
from contextlib import asynccontextmanager
from db.database import AsyncSessionFactory, get_db # –ù—É–∂–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏—è get_db
import traceback # –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from sqlalchemy.exc import IntegrityError
from typing import List, Dict, Any # –î–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from db import crud, schemas, models # –ò–º–ø–æ—Ä—Ç CRUD, —Å—Ö–µ–º –∏ –º–æ–¥–µ–ª–µ–π

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek ---
# –ß–∏—Ç–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEEPSEEK_API_KEY = "sk-a240c8aa262f4573a31e032ca68f8346"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
client = None
if DEEPSEEK_API_KEY:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")
# ------------------------------------

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
async def seed_initial_user():
    if AsyncSessionFactory is None:
        print("–§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —Å–∏–¥–∏–Ω–≥–∞.")
        return
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    async with AsyncSessionFactory() as session:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=1
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, username –±—É–¥–µ—Ç 'testuser1'
        # –í–ù–ò–ú–ê–ù–ò–ï: ID=1 –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è (—Å–º. crud.py)

        await crud.get_or_create_user(db=session, user_id=1, username="testuser1")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# --- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º (–≤–∫–ª—é—á–∞—è startup) ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await seed_initial_user()
    yield
    # –ö–æ–¥ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")


# –ü–µ—Ä–µ–¥–∞–µ–º lifespan –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(lifespan=lifespan)


@app.get("/")
async def read_root():
    return {"message": "Hello World"}


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ HTTP (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–æ–ª—å–∫–æ WebSocket) ---
@app.get("/users/{user_id}/messages", response_model=List[schemas.Message])
async def read_user_messages(
    user_id: int, skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db)
):
    messages = await crud.get_messages_by_user(db=db, user_id=user_id, skip=skip, limit=limit)
    return messages
# -------------------------------------------------------------------------------------------


@app.websocket("/chat")
async def websocket_endpoint(websocket: WebSocket, db: AsyncSession = Depends(get_db)):
    print('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...')
    await websocket.accept()
    conversation_history = [
        {
            "role": "system",
            "content": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –≤–¥—É–º—á–∏–≤–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–∞–∫ –î–æ—Ä–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –µ–º—É –ø–ª–æ—Ö–æ. –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ '—Ç—ã'.\n\n–¢–≤–æ–π –ø–æ–¥—Ö–æ–¥:\n1.  **–°–Ω–∞—á–∞–ª–∞ –ø–æ–π–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏**: –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á—É–≤—Å—Ç–≤ ('–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è', '–≠—Ç–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–µ–ø—Ä–æ—Å—Ç–æ', '–û—Ö, —ç—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ —á—É–≤—Å—Ç–≤–æ').\n2.  **–ò—Å—Å–ª–µ–¥—É–π, –Ω–µ —Ä–µ—à–∞–π**: –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ, —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–º–æ–≥–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å–∞–º–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ('–ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É —Ç–µ–±—è —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ?', '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –µ—Å–ª–∏ –º–æ–∂–µ—à—å', '–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≥–æ–ª–æ–≤—É, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'). –ù–µ —Å–ø–µ—à–∏ —Å –≤—ã–≤–æ–¥–∞–º–∏ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.\n3.  **–ü—Ä–µ–¥–ª–∞–≥–∞–π –º—è–≥–∫–æ, –∫–∞–∫ –∏–¥–µ—é –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è**: –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —à–∞–≥, –¥–µ–ª–∞–π —ç—Ç–æ **—Ç–æ–ª—å–∫–æ** –≤ —Ñ–æ—Ä–º–µ –≤–æ–ø—Ä–æ—Å–∞ ('–ö–∞–∫ –¥—É–º–∞–µ—à—å, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å...?', '–ê —á—Ç–æ, –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ç–∞–∫...?', '–ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞...?'). –°–ø—Ä–∞—à–∏–≤–∞–π –º–Ω–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.\n4.  **–°–ª–µ–¥—É–π –∑–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º**: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç—Ä–æ–π —Å–≤–æ–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ'), –∏—Å—Å–ª–µ–¥—É–π –µ–µ ('–•–º, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è?').\n5.  **–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π**: –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∫–∞–∫ –≤ —á–∞—Ç–µ.\n6.  **–°–¥–µ—Ä–∂–∞–Ω–Ω–æ—Å—Ç—å**: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–º–∞–π–ª–∏–∫–∏ (üôÇ, üòî) –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω–æ. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π (*–æ–±–Ω–∏–º–∞–µ—Ç* –∏ —Ç.–ø.)."
        },
    ]

    current_user_id: int = 1 # –í–ê–ñ–ù–û: –ü–æ–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω

    try:
        while True:
            data = await websocket.receive_text()
            print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

            message_data: Dict[str, Any] | None = None
            user_text: str | None = None
            message_type: str | None = None

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                message_data = json.loads(data)
                if isinstance(message_data, dict):
                    message_type = message_data.get("type")
                    user_text = message_data.get("text") # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON
                else:
                    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ JSON), —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    user_text = str(message_data)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, —Å—á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_text = data

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê –ò–°–¢–û–†–ò–ò ---
            if message_type == "get_history":
                print(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id}")
                try:
                    messages_from_db: List[models.Message] = await crud.get_messages_by_user(
                        db=db, user_id=current_user_id, limit=1000
                    )

                    history_messages = []
                    for msg in messages_from_db:
                        pydantic_msg = schemas.Message.model_validate(msg)
                        msg_dict = pydantic_msg.model_dump()
                        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç Enum –Ω–∞ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        msg_dict["sender"] = pydantic_msg.sender.value

                        # –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É ISO 8601
                        if isinstance(msg_dict.get("timestamp"), datetime):
                            msg_dict["timestamp"] = msg_dict["timestamp"].isoformat()

                        history_messages.append(msg_dict)

                    history_payload = {"type": "history", "messages": history_messages}
                    await websocket.send_json(history_payload)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ({len(history_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:")
                    traceback.print_exc()
                    await websocket.send_json({"type": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."})
                continue

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
            if not user_text:
                print("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

            # 1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º schemas.SenderType.USER.value –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 'USER'
            user_message_data = schemas.MessageCreate(
                text=user_text,
                sender=schemas.SenderType.USER.value, # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                user_id=current_user_id
            )
            try:
                await crud.create_message(db=db, message=user_message_data)
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            except IntegrityError as e:
                print(f"–û—à–∏–±–∫–∞ –ë–î (–≤–µ—Ä–æ—è—Ç–Ω–æ, user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ): {e}")
                await db.rollback()
            except Exception as db_error:
                print(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:")
                traceback.print_exc()
                await db.rollback()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI
            conversation_history.append({"role": "user", "content": user_text})

            bot_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI." # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –í—ã–∑—ã–≤–∞–µ–º DeepSeek API, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if client:
                try:
                    response = client.chat.completions.create(
                        model="deepseek-chat",
                        messages=conversation_history,
                        stream=False # –ü–æ–∫–∞ –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                    )
                    bot_response_text = response.choices[0].message.content
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    conversation_history.append({"role": "assistant", "content": bot_response_text})
                    # TODO: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
                except Exception as ai_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek API: {ai_error}")
                    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot_response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

            # 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º schemas.SenderType.BOT.value –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 'BOT'
            bot_message_data = schemas.MessageCreate(
                text=bot_response_text,
                sender=schemas.SenderType.BOT.value, # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                user_id=current_user_id
            )
            try:
                await crud.create_message(db=db, message=bot_message_data)
                print("–û—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            except IntegrityError as e:
                print(f"–û—à–∏–±–∫–∞ –ë–î (–≤–µ—Ä–æ—è—Ç–Ω–æ, user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ): {e}")
                await db.rollback()
            except Exception as db_error:
                print(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –ë–î:")
                traceback.print_exc()
                await db.rollback()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–ë–´–ß–ù–´–ô –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
            response_payload = {"sender": "bot", "text": bot_response_text} # –¢–∏–ø –Ω–µ 'history'
            await websocket.send_json(response_payload)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç AI: {response_payload}")

    except WebSocketDisconnect:
        print("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ WebSocket:")
        traceback.print_exc()
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        try:
            await websocket.close()
        except RuntimeError:
            pass # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ
    finally:
        # –°–µ—Å—Å–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è 'async with' –≤ get_db
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ")

# –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 