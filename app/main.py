from fastapi import FastAPI
from contextlib import asynccontextmanager
from app.db.database import engine # –ù—É–∂–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏—è get_db
from sqlalchemy import text
import logging
import warnings

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from app.db.seeds.user_seed import seed_initial_user
from app.db.models import Base

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebSocket —Ä–æ—É—Ç–µ—Ä
from app.api.websockets.chat_ws import router as chat_ws_router

warnings.filterwarnings("ignore", module="sqlalchemy")
logging.getLogger("sqlalchemy").setLevel(logging.CRITICAL)
logging.getLogger("sqlalchemy.engine").propagate = False
logging.getLogger("sqlalchemy.engine").handlers = []

async def init_db():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        async with engine.begin() as conn:
            query = text("SELECT table_name FROM information_schema.tables WHERE table_schema='public'")
            result = await conn.execute(query)
            existing_tables = [row[0] for row in result.fetchall()]
            
            if existing_tables:
                print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
                
                # –°–ë–†–û–° –¢–ê–ë–õ–ò–¶
                # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã:
                # await conn.run_sync(lambda conn: Base.metadata.drop_all(conn))
                # await conn.run_sync(lambda conn: Base.metadata.create_all(conn))
                # print("–¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã.")
            else:
                print("üîÑ –¢–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º...")
                await conn.run_sync(lambda conn: Base.metadata.create_all(conn))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                result = await conn.execute(query)
                created_tables = [row[0] for row in result.fetchall()]
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã: {created_tables}")
            
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# --- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º (–≤–∫–ª—é—á–∞—è startup) ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await init_db()
    await seed_initial_user()

    yield
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")


# –ü–µ—Ä–µ–¥–∞–µ–º lifespan –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(lifespan=lifespan)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket —Ä–æ—É—Ç–µ—Ä
app.include_router(chat_ws_router)


@app.get("/")
async def read_root():
    return {"message": "Hello World"}


# @app.get("/users/{user_id}/chats", response_model=List[ChatInfo])
# async def read_user_chats(
#     user_id: int, skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db)
# ):
#     # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞,
#     # —á—Ç–æ —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —á–∞—Ç—ã
#     # –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤ user_id.
#     chats = await crud.get_chats_by_user(db=db, user_id=user_id, skip=skip, limit=limit)
#     # –£–±–∏—Ä–∞–µ–º TODO –ø—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å
#     return chats

# # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 